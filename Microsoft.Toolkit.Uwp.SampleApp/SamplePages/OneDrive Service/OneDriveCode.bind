
// OneDriveService works for OneDrive Consumer as well as OneDrive For Business (Office 365)
//
// Authentication 
// In order to use the OneDriveService you need to authenticate the user and get an access token

// OneDrive consumer you have two options:
// 1) If the user is connected to a windows session with a Microsoft Account, the service is able to silently get an access token.
//    For that you need to associate your application to the Store (Project->Store->Associate App With Store...)
// 2) Or you have to register your app
//  - go to https://dev.onedrive.com/app-registration.htm
//  - When prompted, sign in with your Microsoft account credentials.
//  - Scroll to the bottom of the page (Live (SDK)), and click Add App
//  - Enter your app's name and click Create application.
//  - Copy the Application ID
//  - Add a platform and select mobile application
//  - Save

// OneDrive For business you need to register your app from the Azure Management Portal
// For more information to manualy register your app see go to the following article
// https://docs.microsoft.com/fr-fr/azure/active-directory/develop/active-directory-authentication-scenarios#basics-of-registering-an-application-in-azure-ad
 

// First get the root of your OneDrive
// By default the service silently connect the current windows user if windows is associate with an MS Account
var rootFolder= await OneDriveService.Instance.RootFolderAsync();

// if windows is not associate with a MS Account, you need
// 1) Initialized the service using a authentication provider AccountProviderType.Msa or AccountProviderType.Adal
OneDriveService.Instance.Initialize(appClientId, AccountProviderType.Msa, OneDriveScopes.OfflineAccess | OneDriveScopes.ReadWrite);
// 2) Sign in
if (!await OneDriveService.Instance.LoginAsync())
{
    throw new Exception("Unable to sign in");
}

// Once you have a reference to the Root Folder you can get a list of all items
// List the Items from the current folder
var OneDriveItems = await folder.GetItemsAsync();
do
{
	//Get the next page of items
    OneDriveItems = await folder.NextItemsAsync();   
}
while (OneDriveItems != null);

// Then from there you can play with folders and files
// Create Folder
var level1Folder = await rootFolder.CreateFolderAsync("Level1");
var level2Folder = await level1Folder.CreateFolderAsync("Level2");
var level3Folder = await level2Folder.CreateFolderAsync("Level3");
// You can get a sub folder by path
var level3Folder = await rootFolder.GetFolderAsync("Level1/Level2/Level3");

//Move Folder
var result=await level3Folder.MoveAsync(rootFolder);
// Copy Folder
Var result=level3Folder.CopyAsync(destFolder)

// Rename Folder
await level3Folder.RenameAsync("NewLevel3");

// Create new files
var selectedFile = await OpenLocalFileAsync();
if (selectedFile != null)
{
   using (var localStream = await selectedFile.OpenReadAsync())
   {
     var fileCreated = await level3Folder.CreateFileAsync(selectedFile.Name, CreationCollisionOption.GenerateUniqueName, localStream);
   }
}

// If the file exceed the Maximum size (ie 4MB) use the UploadFileAsync method instead
var largeFileCreated = await folder.UploadFileAsync(selectedFile.Name, localStream, CreationCollisionOption.GenerateUniqueName, 320 * 1024);

// You can also Move, Copy or Rename a file
await fileCreated.MoveAsync(destFolder);
await fileCreated.CopyAsync(destFolder);
await fileCreated.RenameAsync("newName");

// Download a file and save the content in a local file
var remoteFile=await level3Folder.GetFile("NewFile.docx"); 
using (var remoteStream = await remoteFile.OpenAsync())
 {
     byte[] buffer = new byte[remoteStream.Size];
     var localBuffer = await remoteStream.ReadAsync(buffer.AsBuffer(), (uint)remoteStream.Size, InputStreamOptions.ReadAhead);
	 var localFolder = ApplicationData.Current.LocalFolder;
     var myLocalFile = await localFolder.CreateFileAsync($"{oneDriveFile.Name}", CreationCollisionOption.GenerateUniqueName);
     using (var localStream = await myLocalFile.OpenAsync(FileAccessMode.ReadWrite))
     {
         await localStream.WriteAsync(localBuffer);
         await localStream.FlushAsync();
     }
 }

 // At last you can get 
